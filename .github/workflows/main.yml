
name: Test and deploy

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  unit_tests:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Unit tests
        run: ./gradlew test
  android_tests:
    runs-on: [ macos-latest ]
    steps:
      - uses: actions/checkout@v2

      - name: Instrumentation Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedAndroidTest
  build:
    needs: [unit_tests, android_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Generate Release APK
        run: ./gradlew assembleRelease
      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        # ID used to access action output
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - uses: actions/upload-artifact@master
        with:
          name: release.apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}
      - uses: actions/upload-artifact@master
        with:
          name: mapping.txt
          path: app/build/outputs/mapping/release/mapping.txt
  deploy-firebase:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@master
        with:
          name: release.apk
      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: tester
          file: app-release-unsigned-signed.apk

## This is a basic workflow to help you get started with Actions
#
#name: CI
#
## Controls when the action will run.
#on:
#  # Triggers the workflow on push or pull request events but only for the master branch
#  push:
#    branches: [ master ]
#    tags:
#      - 'v*'
#  pull_request:
#    branches: [ master ]
#
#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:
#
## A workflow run is made up of one or more jobs that can run sequentially or in parallel
#jobs:
#  # This workflow contains a single job called "build"
#  build:
#    # The type of runner that the job will run on
#    # runs-on: ubuntu-latest
#    runs-on: macos-latest # Switched to macOS
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#
#      # Runs a single command using the runners shell
#      - name: Run a one-line script
#        run: echo Hello, world!
#
#      # Runs a set of commands using the runners shell
#      - name: Run a multi-line script
#        run: |
#          echo Add other actions to build,
#          echo test, and deploy your project.
#      - name: Change wrapper permissions
#        run: chmod +x ./gradlew
#      - name: Unit tests
#        run: ./gradlew testDebugUnitTest
#      - name: Run instrumentation tests
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: 29
#          arch: x86
#          profile: Nexus 6
#          avd-name: test
#          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -camera-back none
#          disable-animations: true
#          script: ./gradlew connectedCheck
#
#
##  generate-apk:
##    name: Generate apk
##    runs-on: ubuntu-latest
##    needs:
##      - build
##    steps:
##      - uses: actions/checkout@v2
##
##      - name: Change wrapper permissions
##        run: chmod +x ./gradlew
##
##      - name: Generate apk
##        run: ./gradlew assembleDebug
##
##      - name: Upload APK
##        uses: actions/upload-artifact@v2
##        with:
##          name: build-outputoutput
##          path: app/build/outputs/apk/debug/app-debug.apk
#
#  deploy:
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#      # 1
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Change wrapper permissions
#        run: chmod +x ./gradlew
#      # 2
#      - name: Generate Release APK
#        run: ./gradlew assembleRelease
#      # 3
#      - name: Sign APK
#        uses: r0adkll/sign-android-release@v1
#        # ID used to access action output
#        id: sign_app
#        with:
#          releaseDirectory: app/build/outputs/apk/release
#          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
#          alias: ${{ secrets.ALIAS }}
#          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
#          keyPassword: ${{ secrets.KEY_PASSWORD }}
#      # 4
#      - uses: actions/upload-artifact@master
#        with:
#          name: release.apk
#          path: ${{steps.sign_app.outputs.signedReleaseFile}}
#      # 5
#      - uses: actions/upload-artifact@master
#        with:
#          name: mapping.txt
#          path: app/build/outputs/mapping/release/mapping.txt
#
#  deploy-firebase:
#    # 1
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#      # 2
#      - uses: actions/download-artifact@master
#        with:
#          name: release.apk
#      #3
#      - name: upload artifact to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{secrets.FIREBASE_APP_ID}}
#          token: ${{secrets.FIREBASE_TOKEN}}
#          groups: QA
#          file: app-release-unsigned-signed.apk
#
